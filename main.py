import streamlit as st
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

st.set_page_config(page_title="D·ª± ƒëo√°n Rating Amazon", layout="centered")
st.title("üîç D·ª± ƒëo√°n ƒëi·ªÉm ƒë√°nh gi√° s·∫£n ph·∫©m Amazon")
st.caption("·ª®ng d·ª•ng d√πng m√¥ h√¨nh h·ªçc m√°y ƒë·ªÉ d·ª± ƒëo√°n rating d·ª±a tr√™n gi√° v√† gi·∫£m gi√°.")

# ---------- B∆∞·ªõc 1: T·∫£i d·ªØ li·ªáu ----------
@st.cache_data
def load_data():
    try:
        df = pd.read_csv("amazon.csv")
    except:
        # Dataset m·∫´u n·∫øu kh√¥ng c√≥ file ho·∫∑c l·ªói ƒë·ªãnh d·∫°ng
        df = pd.DataFrame({
            'discounted_price': [599, 299, 999, 799, 399],
            'actual_price': [999, 499, 1999, 1499, 699],
            'discount_percentage': [40, 40, 50, 47, 43],
            'rating': [4.2, 3.8, 4.5, 4.1, 3.9],
            'rating_count': [2200, 1500, 3100, 5000, 1800]
        })
    return df

df = load_data()

# ---------- B∆∞·ªõc 2: Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu ----------
for col in ['discounted_price', 'actual_price', 'discount_percentage', 'rating', 'rating_count']:
    df[col] = pd.to_numeric(df[col], errors='coerce')

df = df.dropna(subset=['discounted_price', 'actual_price', 'discount_percentage', 'rating', 'rating_count'])

# ---------- B∆∞·ªõc 3: T·∫°o v√† hu·∫•n luy·ªán m√¥ h√¨nh ----------
@st.cache_resource
def train_model():
    features = ['discounted_price', 'actual_price', 'discount_percentage', 'rating_count']
    target = 'rating'

    X = df[features]
    y = df[target]

    if len(X) < 5:
        return None, None

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)
    r2 = r2_score(y_test, y_pred)

    return model, r2

model, r2 = train_model()

if model is None:
    st.error("‚ùå D·ªØ li·ªáu kh√¥ng ƒë·ªß ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh. C·∫ßn √≠t nh·∫•t 5 d√≤ng d·ªØ li·ªáu h·ª£p l·ªá.")
    st.stop()

st.success(f"‚úÖ M√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán xong v·ªõi ƒë·ªô ch√≠nh x√°c (R¬≤): {round(r2, 3)}")

# ---------- B∆∞·ªõc 4: Nh·∫≠p th√¥ng tin s·∫£n ph·∫©m ----------
st.header("üì• Nh·∫≠p th√¥ng tin s·∫£n ph·∫©m ƒë·ªÉ d·ª± ƒëo√°n")

discounted_price = st.number_input("Gi√° sau gi·∫£m (‚Çπ)", min_value=0)
actual_price = st.number_input("Gi√° g·ªëc (‚Çπ)", min_value=0)
discount_percentage = st.slider("Gi·∫£m gi√° (%)", 0, 100, 20)
rating_count = st.number_input("S·ªë l∆∞·ª£ng ƒë√°nh gi√°", min_value=0)

# ---------- B∆∞·ªõc 5: D·ª± ƒëo√°n ----------
if st.button("D·ª± ƒëo√°n"):
    input_data = pd.DataFrame({
        'discounted_price': [discounted_price],
        'actual_price': [actual_price],
        'discount_percentage': [discount_percentage],
        'rating_count': [rating_count]
    })
    prediction = model.predict(input_data)[0]
    st.subheader("üìà K·∫øt qu·∫£ d·ª± ƒëo√°n:")
    st.success(f"‚≠ê ƒêi·ªÉm ƒë√°nh gi√° d·ª± ƒëo√°n: {round(prediction, 2)}")
