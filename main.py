import streamlit as st
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

st.set_page_config(page_title="D·ª± ƒëo√°n Rating Amazon", layout="centered")
st.title("üîç D·ª± ƒëo√°n ƒëi·ªÉm ƒë√°nh gi√° s·∫£n ph·∫©m Amazon")

# ---------- B∆∞·ªõc 1: Load d·ªØ li·ªáu ----------
@st.cache_data
def load_data():
    try:
        df = pd.read_csv("amazon.csv")
    except:
        # D·ªØ li·ªáu m·∫´u fallback
        df = pd.DataFrame({
            'discounted_price': [599, 299, 999, 799, 399],
            'actual_price': [999, 499, 1999, 1499, 699],
            'discount_percentage': [40, 40, 50, 47, 43],
            'rating': [4.2, 3.8, 4.5, 4.1, 3.9],
            'rating_count': [2200, 1500, 3100, 5000, 1800]
        })
    return df

# G·ªåI load_data() TR∆Ø·ªöC KHI D√ôNG df
df = load_data()

# ---------- B∆∞·ªõc 2: Ti·ªÅn x·ª≠ l√Ω ----------
numeric_cols = ['discounted_price', 'actual_price', 'discount_percentage', 'rating', 'rating_count']
for col in numeric_cols:
    df[col] = pd.to_numeric(df[col], errors='coerce')

df = df.dropna(subset=numeric_cols)

# ---------- B∆∞·ªõc 3: Hu·∫•n luy·ªán m√¥ h√¨nh ----------
@st.cache_resource
def train_model():
    X = df[['discounted_price', 'actual_price', 'discount_percentage', 'rating_count']]
    y = df['rating']

    if len(df) < 5:
        return None, None

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    r2 = r2_score(y_test, model.predict(X_test))
    return model, r2

model, r2 = train_model()

if model is None:
    st.error("‚ùå Kh√¥ng ƒë·ªß d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh.")
    st.stop()

st.success(f"‚úÖ M√¥ h√¨nh hu·∫•n luy·ªán th√†nh c√¥ng. R¬≤: {round(r2, 3)}")

# ---------- B∆∞·ªõc 4: D·ª± ƒëo√°n ----------
st.header("üì• Nh·∫≠p th√¥ng tin s·∫£n ph·∫©m")

discounted_price = st.number_input("Gi√° sau gi·∫£m (‚Çπ)", min_value=0)
actual_price = st.number_input("Gi√° g·ªëc (‚Çπ)", min_value=0)
discount_percentage = st.slider("Gi·∫£m gi√° (%)", 0, 100, 20)
rating_count = st.number_input("S·ªë l∆∞·ª£t ƒë√°nh gi√°", min_value=0)

if st.button("D·ª± ƒëo√°n"):
    input_df = pd.DataFrame({
        'discounted_price': [discounted_price],
        'actual_price': [actual_price],
        'discount_percentage': [discount_percentage],
        'rating_count': [rating_count]
    })

    prediction = model.predict(input_df)[0]
    st.subheader("‚≠ê D·ª± ƒëo√°n ƒëi·ªÉm ƒë√°nh gi√°:")
    st.success(f"{round(prediction, 2)} / 5.0")
